//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SportCentre.MVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Collections.Generic;

    public partial class SportCentreEntities : DbContext
    {
        public SportCentreEntities()
            : base("name=SportCentreEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Equipment> Equipments { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<Gym> Gyms { get; set; }
        public virtual DbSet<Inventory> Inventories { get; set; }
        public virtual DbSet<Lesson> Lessons { get; set; }
        public virtual DbSet<Membership> Memberships { get; set; }
        public virtual DbSet<Sport> Sports { get; set; }
        public virtual DbSet<Subscription> Subscriptions { get; set; }
        public virtual DbSet<Trainer> Trainers { get; set; }
        public virtual DbSet<View_TrainerSport_Updatable> View_TrainerSport_Updatable { get; set; }
    
        public virtual IEnumerable<Client> GetClientsBySubscription(string subscription)
        {
            return Memberships.Where(m => m.Subscription.Type == subscription).Select(m => m.Client);
        }
    
        public virtual IEnumerable<Lesson> GetLessonsBySport(string sportName)
        {
            return Lessons.Where(l => l.Group.Sport.Name == sportName);
        }
    
        public virtual IEnumerable<Trainer> GetTrainersBySport(string sportName)
        {
            return Trainers.Where(t => t.Sport.Name == sportName);
        }
    }
}
